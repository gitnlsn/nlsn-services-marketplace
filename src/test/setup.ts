import { vi } from "vitest";
import type { MockPrismaClient } from "./types";

export type { MockPrismaClient } from "./types";

// Test user data
export const testUsers = {
	client: {
		id: "test-client-id",
		name: "Test Client",
		email: "client@test.com",
		isProfessional: false,
		accountBalance: 0,
		cpf: null,
		phone: null,
		bio: null,
		address: null,
		city: null,
		state: null,
		zipCode: null,
		professionalSince: null,
		notificationEmail: true,
		notificationSms: false,
		notificationWhatsapp: false,
		image: null,
		emailVerified: null,
		createdAt: new Date(),
		updatedAt: new Date(),
	},
	professional: {
		id: "test-professional-id",
		name: "Test Professional",
		email: "professional@test.com",
		isProfessional: true,
		accountBalance: 100.0,
		cpf: "12345678901",
		phone: "11999999999",
		bio: "Professional test user",
		address: "Test Address",
		city: "SÃ£o Paulo",
		state: "SP",
		zipCode: "01234567",
		professionalSince: new Date(),
		notificationEmail: true,
		notificationSms: true,
		notificationWhatsapp: true,
		image: null,
		emailVerified: null,
		createdAt: new Date(),
		updatedAt: new Date(),
	},
};

// Test category data
export const testCategory = {
	id: "test-category-id",
	name: "Test Category",
};

// Test service data
export const testService = {
	id: "test-service-id",
	title: "Test Service",
	description: "This is a test service for testing purposes",
	price: 50.0,
	priceType: "fixed" as const,
	categoryId: testCategory.id,
	providerId: testUsers.professional.id,
	duration: 60,
	location: "Test Location",
	maxBookings: 5,
	status: "active" as const,
	viewCount: 0,
	bookingCount: 0,
	embedding: [],
	allowRecurring: true,
	bufferTime: 15,
	createdAt: new Date(),
	updatedAt: new Date(),
};

// Helper function to create a mock Prisma client
export function createMockPrismaClient(): MockPrismaClient {
	const mockDb = {
		user: {
			create: vi.fn(),
			createMany: vi.fn(),
			findUnique: vi.fn(),
			findUniqueOrThrow: vi.fn(),
			findFirst: vi.fn(),
			findMany: vi.fn(),
			update: vi.fn(),
			updateMany: vi.fn(),
			delete: vi.fn(),
			deleteMany: vi.fn(),
			upsert: vi.fn(),
			count: vi.fn(),
		},
		service: {
			create: vi.fn(),
			createMany: vi.fn(),
			findUnique: vi.fn(),
			findUniqueOrThrow: vi.fn(),
			findFirst: vi.fn(),
			findMany: vi.fn(),
			update: vi.fn(),
			updateMany: vi.fn(),
			delete: vi.fn(),
			deleteMany: vi.fn(),
			upsert: vi.fn(),
			count: vi.fn(),
		},
		booking: {
			create: vi.fn(),
			createMany: vi.fn(),
			findUnique: vi.fn(),
			findUniqueOrThrow: vi.fn(),
			findFirst: vi.fn(),
			findMany: vi.fn(),
			update: vi.fn(),
			updateMany: vi.fn(),
			delete: vi.fn(),
			deleteMany: vi.fn(),
			upsert: vi.fn(),
			count: vi.fn(),
			groupBy: vi.fn(),
		},
		payment: {
			create: vi.fn(),
			createMany: vi.fn(),
			findUnique: vi.fn(),
			findUniqueOrThrow: vi.fn(),
			findFirst: vi.fn(),
			findMany: vi.fn(),
			update: vi.fn(),
			updateMany: vi.fn(),
			delete: vi.fn(),
			deleteMany: vi.fn(),
			upsert: vi.fn(),
			count: vi.fn(),
			aggregate: vi.fn(),
			groupBy: vi.fn(),
		},
		notification: {
			create: vi.fn(),
			createMany: vi.fn(),
			findUnique: vi.fn(),
			findUniqueOrThrow: vi.fn(),
			findFirst: vi.fn(),
			findMany: vi.fn(),
			update: vi.fn(),
			updateMany: vi.fn(),
			delete: vi.fn(),
			deleteMany: vi.fn(),
			upsert: vi.fn(),
			count: vi.fn(),
		},
		category: {
			create: vi.fn(),
			createMany: vi.fn(),
			findUnique: vi.fn(),
			findUniqueOrThrow: vi.fn(),
			findFirst: vi.fn(),
			findMany: vi.fn(),
			update: vi.fn(),
			updateMany: vi.fn(),
			delete: vi.fn(),
			deleteMany: vi.fn(),
			upsert: vi.fn(),
			count: vi.fn(),
		},
		review: {
			create: vi.fn(),
			createMany: vi.fn(),
			findUnique: vi.fn(),
			findUniqueOrThrow: vi.fn(),
			findFirst: vi.fn(),
			findMany: vi.fn(),
			update: vi.fn(),
			updateMany: vi.fn(),
			delete: vi.fn(),
			deleteMany: vi.fn(),
			upsert: vi.fn(),
			count: vi.fn(),
			aggregate: vi.fn(),
			groupBy: vi.fn(),
		},
		withdrawal: {
			create: vi.fn(),
			createMany: vi.fn(),
			findUnique: vi.fn(),
			findUniqueOrThrow: vi.fn(),
			findFirst: vi.fn(),
			findMany: vi.fn(),
			update: vi.fn(),
			updateMany: vi.fn(),
			delete: vi.fn(),
			deleteMany: vi.fn(),
			upsert: vi.fn(),
			count: vi.fn(),
			aggregate: vi.fn(),
		},
		bankAccount: {
			create: vi.fn(),
			createMany: vi.fn(),
			findUnique: vi.fn(),
			findUniqueOrThrow: vi.fn(),
			findFirst: vi.fn(),
			findMany: vi.fn(),
			update: vi.fn(),
			updateMany: vi.fn(),
			delete: vi.fn(),
			deleteMany: vi.fn(),
			upsert: vi.fn(),
			count: vi.fn(),
		},
		image: {
			create: vi.fn(),
			createMany: vi.fn(),
			findUnique: vi.fn(),
			findUniqueOrThrow: vi.fn(),
			findFirst: vi.fn(),
			findMany: vi.fn(),
			update: vi.fn(),
			updateMany: vi.fn(),
			delete: vi.fn(),
			deleteMany: vi.fn(),
			upsert: vi.fn(),
			count: vi.fn(),
		},
		waitlist: {
			create: vi.fn(),
			createMany: vi.fn(),
			findUnique: vi.fn(),
			findUniqueOrThrow: vi.fn(),
			findFirst: vi.fn(),
			findMany: vi.fn(),
			update: vi.fn(),
			updateMany: vi.fn(),
			delete: vi.fn(),
			deleteMany: vi.fn(),
			upsert: vi.fn(),
			count: vi.fn(),
			groupBy: vi.fn(),
		},
		recurringBooking: {
			create: vi.fn(),
			createMany: vi.fn(),
			findUnique: vi.fn(),
			findUniqueOrThrow: vi.fn(),
			findFirst: vi.fn(),
			findMany: vi.fn(),
			update: vi.fn(),
			updateMany: vi.fn(),
			delete: vi.fn(),
			deleteMany: vi.fn(),
			upsert: vi.fn(),
			count: vi.fn(),
		},
		groupBooking: {
			create: vi.fn(),
			createMany: vi.fn(),
			findUnique: vi.fn(),
			findUniqueOrThrow: vi.fn(),
			findFirst: vi.fn(),
			findMany: vi.fn(),
			update: vi.fn(),
			updateMany: vi.fn(),
			delete: vi.fn(),
			deleteMany: vi.fn(),
			upsert: vi.fn(),
			count: vi.fn(),
		},
		serviceAddOn: {
			create: vi.fn(),
			createMany: vi.fn(),
			findUnique: vi.fn(),
			findUniqueOrThrow: vi.fn(),
			findFirst: vi.fn(),
			findMany: vi.fn(),
			update: vi.fn(),
			updateMany: vi.fn(),
			delete: vi.fn(),
			deleteMany: vi.fn(),
			upsert: vi.fn(),
			count: vi.fn(),
		},
		serviceBundle: {
			create: vi.fn(),
			createMany: vi.fn(),
			findUnique: vi.fn(),
			findUniqueOrThrow: vi.fn(),
			findFirst: vi.fn(),
			findMany: vi.fn(),
			update: vi.fn(),
			updateMany: vi.fn(),
			delete: vi.fn(),
			deleteMany: vi.fn(),
			upsert: vi.fn(),
			count: vi.fn(),
		},
		bookingAddOn: {
			create: vi.fn(),
			createMany: vi.fn(),
			findUnique: vi.fn(),
			findUniqueOrThrow: vi.fn(),
			findFirst: vi.fn(),
			findMany: vi.fn(),
			update: vi.fn(),
			updateMany: vi.fn(),
			delete: vi.fn(),
			deleteMany: vi.fn(),
			upsert: vi.fn(),
			count: vi.fn(),
		},
		bookingReminder: {
			create: vi.fn(),
			createMany: vi.fn(),
			findUnique: vi.fn(),
			findUniqueOrThrow: vi.fn(),
			findFirst: vi.fn(),
			findMany: vi.fn(),
			update: vi.fn(),
			updateMany: vi.fn(),
			delete: vi.fn(),
			deleteMany: vi.fn(),
			upsert: vi.fn(),
			count: vi.fn(),
		},
		groupBookingSettings: {
			create: vi.fn(),
			createMany: vi.fn(),
			findUnique: vi.fn(),
			findUniqueOrThrow: vi.fn(),
			findFirst: vi.fn(),
			findMany: vi.fn(),
			update: vi.fn(),
			updateMany: vi.fn(),
			delete: vi.fn(),
			deleteMany: vi.fn(),
			upsert: vi.fn(),
			count: vi.fn(),
		},
		bookingPolicy: {
			create: vi.fn(),
			createMany: vi.fn(),
			findUnique: vi.fn(),
			findUniqueOrThrow: vi.fn(),
			findFirst: vi.fn(),
			findMany: vi.fn(),
			update: vi.fn(),
			updateMany: vi.fn(),
			delete: vi.fn(),
			deleteMany: vi.fn(),
			upsert: vi.fn(),
			count: vi.fn(),
		},
		timeSlot: {
			create: vi.fn(),
			createMany: vi.fn(),
			findUnique: vi.fn(),
			findUniqueOrThrow: vi.fn(),
			findFirst: vi.fn(),
			findMany: vi.fn(),
			update: vi.fn(),
			updateMany: vi.fn(),
			delete: vi.fn(),
			deleteMany: vi.fn(),
			upsert: vi.fn(),
			count: vi.fn(),
		},
		$connect: vi.fn().mockResolvedValue(undefined),
		$disconnect: vi.fn().mockResolvedValue(undefined),
		$transaction: vi.fn().mockImplementation((fn) => {
			if (typeof fn === "function") {
				return fn(mockDb);
			}
			return Promise.all(fn);
		}),
		$queryRaw: vi.fn(),
		$executeRaw: vi.fn(),
		$executeRawUnsafe: vi.fn(),
		$queryRawUnsafe: vi.fn(),
	} as MockPrismaClient;

	return mockDb;
}

// Export a default mock database instance for tests to use
export const testDb = createMockPrismaClient();

// No database setup or cleanup needed anymore
export async function setupTestDatabase() {
	// No-op: Tests will configure mocks as needed
}

export async function cleanupTestDatabase() {
	// No-op: No actual database to clean up
}
