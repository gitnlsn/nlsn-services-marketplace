// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// =====================================================
// USER & AUTHENTICATION MODELS
// =====================================================

model User {
    id                String     @id @default(cuid())
    email             String     @unique
    emailVerified     DateTime?
    name              String?
    image             String?
    phone             String?
    bio               String?    @db.Text
    location          String?
    isActive          Boolean    @default(true)
    isProfessional    Boolean    @default(false)
    professionalSince DateTime?
    createdAt         DateTime   @default(now())
    updatedAt         DateTime   @updatedAt

    // Auth relations
    accounts Account[]
    sessions Session[]

    // Service relations  
    services         Service[]
    customerBookings Booking[]         @relation("CustomerBookings")
    providerBookings Booking[]         @relation("ProviderBookings")

    // Communication
    sentMessages     Message[]         @relation("SentMessages")
    receivedMessages Message[]         @relation("ReceivedMessages")
    conversations    ConversationUser[]
    notifications    Notification[]

    // Reviews & Ratings
    reviewsGiven    Review[]          @relation("ReviewsGiven")
    reviewsReceived Review[]          @relation("ReviewsReceived")

    // Financial
    earnings        Earning[]
    withdrawals     Withdrawal[]
    payments        Payment[]

    @@index([email])
    @@index([isProfessional])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// =====================================================
// SERVICE MODELS
// =====================================================

model Category {
    id          String    @id @default(cuid())
    name        String    @unique
    description String?
    icon        String?
    slug        String    @unique
    parentId    String?
    parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
    children    Category[] @relation("CategoryHierarchy")
    services    Service[]
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@index([slug])
}

model Service {
    id                 String             @id @default(cuid())
    title              String
    description        String             @db.Text
    shortDescription   String?
    status             ServiceStatus      @default(DRAFT)
    categoryId         String
    category           Category           @relation(fields: [categoryId], references: [id])
    providerId         String
    provider           User               @relation(fields: [providerId], references: [id], onDelete: Cascade)
    
    // Pricing
    priceType          PriceType          @default(FIXED)
    price              Decimal            @db.Decimal(10, 2)
    priceUnit          String?            // e.g., "hour", "session", "project"
    currency           String             @default("USD")
    
    // Service details
    duration           Int?               // Duration in minutes
    location           String?
    serviceType        ServiceType        @default(IN_PERSON)
    maxBookingsPerDay  Int?
    advanceBookingDays Int                @default(30)
    cancellationPolicy String?            @db.Text
    
    // Statistics
    viewCount          Int                @default(0)
    bookingCount       Int                @default(0)
    averageRating      Decimal?           @db.Decimal(3, 2)
    totalReviews       Int                @default(0)
    
    // Metadata
    tags               String[]
    features           String[]
    requirements       String?            @db.Text
    isActive           Boolean            @default(true)
    isFeatured         Boolean            @default(false)
    createdAt          DateTime           @default(now())
    updatedAt          DateTime           @updatedAt
    
    // Relations
    bookings          Booking[]
    reviews           Review[]
    media             ServiceMedia[]
    availability      Availability[]
    favorites         Favorite[]

    @@index([providerId])
    @@index([categoryId])
    @@index([status])
    @@index([serviceType])
    @@index([averageRating])
}

model ServiceMedia {
    id        String   @id @default(cuid())
    serviceId String
    service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
    url       String
    type      MediaType
    caption   String?
    order     Int      @default(0)
    createdAt DateTime @default(now())

    @@index([serviceId])
}

model Availability {
    id        String   @id @default(cuid())
    serviceId String
    service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
    dayOfWeek Int      // 0 = Sunday, 6 = Saturday
    startTime String   // HH:MM format
    endTime   String   // HH:MM format
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([serviceId, dayOfWeek, startTime])
    @@index([serviceId])
}

// =====================================================
// BOOKING MODELS
// =====================================================

model Booking {
    id                String        @id @default(cuid())
    serviceId         String
    service           Service       @relation(fields: [serviceId], references: [id])
    customerId        String
    customer          User          @relation("CustomerBookings", fields: [customerId], references: [id])
    providerId        String
    provider          User          @relation("ProviderBookings", fields: [providerId], references: [id])
    
    // Booking details
    status            BookingStatus @default(PENDING)
    bookingDate       DateTime
    startTime         String        // HH:MM format
    endTime           String        // HH:MM format
    duration          Int           // in minutes
    
    // Pricing
    price             Decimal       @db.Decimal(10, 2)
    serviceFee        Decimal       @db.Decimal(10, 2)
    totalAmount       Decimal       @db.Decimal(10, 2)
    currency          String        @default("USD")
    
    // Additional info
    specialRequests   String?       @db.Text
    customerNotes     String?       @db.Text
    providerNotes     String?       @db.Text
    cancellationReason String?      @db.Text
    
    // Timestamps
    confirmedAt       DateTime?
    completedAt       DateTime?
    cancelledAt       DateTime?
    createdAt         DateTime      @default(now())
    updatedAt         DateTime      @updatedAt
    
    // Relations
    payment          Payment?
    review           Review?
    messages         Message[]

    @@index([customerId])
    @@index([providerId])
    @@index([serviceId])
    @@index([status])
    @@index([bookingDate])
}

// =====================================================
// PAYMENT & FINANCIAL MODELS
// =====================================================

model Payment {
    id              String        @id @default(cuid())
    bookingId       String        @unique
    booking         Booking       @relation(fields: [bookingId], references: [id])
    userId          String
    user            User          @relation(fields: [userId], references: [id])
    
    amount          Decimal       @db.Decimal(10, 2)
    currency        String        @default("USD")
    status          PaymentStatus @default(PENDING)
    method          PaymentMethod
    
    // Payment gateway info
    transactionId   String?       @unique
    gatewayResponse Json?
    
    // Timestamps
    paidAt          DateTime?
    refundedAt      DateTime?
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt

    @@index([userId])
    @@index([status])
}

model Earning {
    id            String        @id @default(cuid())
    userId        String
    user          User          @relation(fields: [userId], references: [id])
    bookingId     String
    
    amount        Decimal       @db.Decimal(10, 2)
    serviceFee    Decimal       @db.Decimal(10, 2)
    netAmount     Decimal       @db.Decimal(10, 2)
    currency      String        @default("USD")
    status        EarningStatus @default(PENDING)
    
    earnedAt      DateTime
    availableAt   DateTime
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt

    @@index([userId])
    @@index([status])
}

model Withdrawal {
    id            String           @id @default(cuid())
    userId        String
    user          User             @relation(fields: [userId], references: [id])
    
    amount        Decimal          @db.Decimal(10, 2)
    currency      String           @default("USD")
    status        WithdrawalStatus @default(PENDING)
    method        PaymentMethod
    
    // Bank/Payment details
    accountDetails Json?
    transactionId  String?
    
    // Timestamps
    requestedAt    DateTime         @default(now())
    processedAt    DateTime?
    completedAt    DateTime?
    rejectedAt     DateTime?
    rejectionReason String?
    
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt

    @@index([userId])
    @@index([status])
}

// =====================================================
// COMMUNICATION MODELS
// =====================================================

model Conversation {
    id           String               @id @default(cuid())
    participants ConversationUser[]
    messages     Message[]
    lastMessageAt DateTime?
    createdAt    DateTime             @default(now())
    updatedAt    DateTime             @updatedAt

    @@index([lastMessageAt])
}

model ConversationUser {
    id             String       @id @default(cuid())
    conversationId String
    conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
    userId         String
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    unreadCount    Int          @default(0)
    lastReadAt     DateTime?
    isActive       Boolean      @default(true)
    joinedAt       DateTime     @default(now())

    @@unique([conversationId, userId])
    @@index([userId])
}

model Message {
    id             String       @id @default(cuid())
    conversationId String
    conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
    senderId       String
    sender         User         @relation("SentMessages", fields: [senderId], references: [id])
    recipientId    String
    recipient      User         @relation("ReceivedMessages", fields: [recipientId], references: [id])
    
    content        String       @db.Text
    type           MessageType  @default(TEXT)
    bookingId      String?
    booking        Booking?     @relation(fields: [bookingId], references: [id])
    
    isRead         Boolean      @default(false)
    readAt         DateTime?
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt

    @@index([conversationId])
    @@index([senderId])
    @@index([recipientId])
    @@index([bookingId])
}

model Notification {
    id         String           @id @default(cuid())
    userId     String
    user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    type       NotificationType
    title      String
    message    String           @db.Text
    data       Json?
    
    isRead     Boolean          @default(false)
    readAt     DateTime?
    createdAt  DateTime         @default(now())

    @@index([userId])
    @@index([isRead])
    @@index([type])
}

// =====================================================
// REVIEW & RATING MODELS
// =====================================================

model Review {
    id           String   @id @default(cuid())
    bookingId    String   @unique
    booking      Booking  @relation(fields: [bookingId], references: [id])
    serviceId    String
    service      Service  @relation(fields: [serviceId], references: [id])
    reviewerId   String
    reviewer     User     @relation("ReviewsGiven", fields: [reviewerId], references: [id])
    revieweeId   String
    reviewee     User     @relation("ReviewsReceived", fields: [revieweeId], references: [id])
    
    rating       Int      // 1-5 stars
    title        String?
    comment      String?  @db.Text
    
    // Specific ratings
    quality      Int?     // 1-5
    value        Int?     // 1-5
    communication Int?    // 1-5
    punctuality  Int?     // 1-5
    
    isVerified   Boolean  @default(true) // Verified purchase
    isPublic     Boolean  @default(true)
    
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@index([serviceId])
    @@index([reviewerId])
    @@index([revieweeId])
    @@index([rating])
}

// =====================================================
// ADDITIONAL MODELS
// =====================================================

model Favorite {
    id        String   @id @default(cuid())
    userId    String
    serviceId String
    service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())

    @@unique([userId, serviceId])
    @@index([userId])
    @@index([serviceId])
}

// =====================================================
// ENUMS
// =====================================================

enum ServiceStatus {
    DRAFT
    ACTIVE
    PAUSED
    ARCHIVED
}

enum ServiceType {
    IN_PERSON
    ONLINE
    HYBRID
}

enum PriceType {
    FIXED
    HOURLY
    DAILY
    CUSTOM
}

enum BookingStatus {
    PENDING
    CONFIRMED
    IN_PROGRESS
    COMPLETED
    CANCELLED
    DISPUTED
}

enum PaymentStatus {
    PENDING
    PROCESSING
    COMPLETED
    FAILED
    REFUNDED
    PARTIALLY_REFUNDED
}

enum PaymentMethod {
    CREDIT_CARD
    DEBIT_CARD
    PAYPAL
    APPLE_PAY
    GOOGLE_PAY
    BANK_TRANSFER
}

enum EarningStatus {
    PENDING
    AVAILABLE
    WITHDRAWN
}

enum WithdrawalStatus {
    PENDING
    PROCESSING
    COMPLETED
    REJECTED
}

enum MessageType {
    TEXT
    BOOKING_REQUEST
    BOOKING_UPDATE
    SYSTEM
}

enum NotificationType {
    BOOKING_REQUEST
    BOOKING_CONFIRMED
    BOOKING_CANCELLED
    BOOKING_COMPLETED
    PAYMENT_RECEIVED
    MESSAGE_RECEIVED
    REVIEW_RECEIVED
    WITHDRAWAL_COMPLETED
    SYSTEM
}

enum MediaType {
    IMAGE
    VIDEO
}
